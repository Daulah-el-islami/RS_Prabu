/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Master;

import MainMenu.F_Menu;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Daulah
 */

public class F_Pemeriksaan extends javax.swing.JFrame {

    private final DefaultTableModel tabel;
    Boolean fungsi_simpan = false, fungsi_ubah = false;
    private Statement stt;
    java.text.SimpleDateFormat kal = new java.text.SimpleDateFormat("yyyy-MM-dd");
    private TableColumn column;
    String temp_kd_pemeriksaan = "";

    /**
     * Creates new form F_Pemeriksaan
     */
    public F_Pemeriksaan() {
        initComponents();
        this.setLocationRelativeTo(null);
        String[] judul = {"KODE PEMERIKSAAN", "KODE DOKTER", "NAMA DOKTER", "KODE PASIEN", "NAMA PASIEN", "DIAGNOSA", "TANGGAL PERIKSA", "HASIL"};
        tabel = new DefaultTableModel(judul, 0);
        jTable1.setModel(tabel);
        tampilkan_data();
        setLocationRelativeTo(this);
        aktif(false);
        setTombol(true);
        aturKolom();
        tampil_kodedokter();
        e_namadokter.setText("");
        e_kddokter.setSelectedItem(null);
    }

    private void diagnosa() {
        e_diagnosa.addItem("-");
        e_diagnosa.addItem("Berat");
        e_diagnosa.addItem("Ringan");
        e_diagnosa.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        e_kdpemeriksaan = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        batal = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        e_namapasien = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        e_kdpasien = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        cari_pasien = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        e_hasil = new javax.swing.JTextField();
        e_namadokter = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        cari_dokter = new javax.swing.JButton();
        pencarian = new javax.swing.JTextField();
        e_kddokter = new javax.swing.JComboBox();
        e_diagnosa = new javax.swing.JComboBox();
        keluar = new javax.swing.JButton();
        e_tanggalperiksa = new com.toedter.calendar.JDateChooser();
        hapus = new javax.swing.JButton();
        simpan = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        tambah = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Kode Dokter");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Nama Dokter");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText(":");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText(":");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText(":");
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, -1, -1));

        e_kdpemeriksaan.setEditable(false);
        e_kdpemeriksaan.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        e_kdpemeriksaan.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        e_kdpemeriksaan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        e_kdpemeriksaan.setMargin(new java.awt.Insets(0, 3, 0, 3));
        getContentPane().add(e_kdpemeriksaan, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 200, 30));

        jScrollPane2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        jTable1.setPreferredSize(new java.awt.Dimension(1010, 68));
        jTable1.setRowHeight(17);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 1010, 159));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("DATA PEMERIKSAAN");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, 40));

        batal.setText("Batal");
        batal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        batal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        batal.setMargin(new java.awt.Insets(2, 0, 2, 0));
        batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batalActionPerformed(evt);
            }
        });
        getContentPane().add(batal, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 330, 87, 37));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Kode Pemeriksaan");
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        e_namapasien.setEditable(false);
        e_namapasien.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        e_namapasien.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        e_namapasien.setMargin(new java.awt.Insets(0, 3, 0, 3));
        getContentPane().add(e_namapasien, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 200, 30));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Nama Pasien");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText(":");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText(":");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, -1, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Kode Pasien");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        e_kdpasien.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        e_kdpasien.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        e_kdpasien.setMargin(new java.awt.Insets(0, 3, 0, 3));
        getContentPane().add(e_kdpasien, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 110, 30));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Diagnosa");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, -1, -1));

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText(":");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 120, -1, -1));

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("Tanggal Periksa");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, -1, -1));

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setText("Hasil");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 200, -1, -1));

        cari_pasien.setText("CARI");
        cari_pasien.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cari_pasien.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cari_pasien.setMargin(new java.awt.Insets(2, 0, 2, 0));
        cari_pasien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cari_pasienActionPerformed(evt);
            }
        });
        getContentPane().add(cari_pasien, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 80, 30));

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText(":");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, 10, -1));

        e_hasil.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        e_hasil.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        e_hasil.setMargin(new java.awt.Insets(0, 3, 0, 3));
        getContentPane().add(e_hasil, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 190, 220, 30));

        e_namadokter.setEditable(false);
        e_namadokter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        e_namadokter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        e_namadokter.setMargin(new java.awt.Insets(0, 3, 0, 3));
        getContentPane().add(e_namadokter, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 200, 30));

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText(":");
        getContentPane().add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 160, -1, -1));

        refresh.setText("BERSIHKAN");
        refresh.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        refresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refresh.setMargin(new java.awt.Insets(2, 0, 2, 0));
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        getContentPane().add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 330, 87, 37));

        cari_dokter.setText("Cari");
        cari_dokter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cari_dokter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cari_dokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cari_dokterActionPerformed(evt);
            }
        });
        getContentPane().add(cari_dokter, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 330, 87, 37));

        pencarian.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        pencarian.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        pencarian.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pencarian.setMargin(new java.awt.Insets(0, 3, 0, 3));
        pencarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pencarianActionPerformed(evt);
            }
        });
        getContentPane().add(pencarian, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 330, 230, 37));

        e_kddokter.setEditable(true);
        e_kddokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_kddokterActionPerformed(evt);
            }
        });
        getContentPane().add(e_kddokter, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 200, 30));

        e_diagnosa.setEditable(true);
        e_diagnosa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Berat", "Ringan" }));
        e_diagnosa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_diagnosaActionPerformed(evt);
            }
        });
        getContentPane().add(e_diagnosa, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 110, 220, 30));

        keluar.setText("Kembali");
        keluar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        keluar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        keluar.setMargin(new java.awt.Insets(2, 0, 2, 0));
        keluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keluarActionPerformed(evt);
            }
        });
        getContentPane().add(keluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 20, 87, 37));

        e_tanggalperiksa.setDateFormatString("dd MMMM  yyyy");
        e_tanggalperiksa.setEnabled(false);
        getContentPane().add(e_tanggalperiksa, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 220, 30));

        hapus.setText("Hapus");
        hapus.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        hapus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hapus.setEnabled(false);
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });
        getContentPane().add(hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, 87, 37));

        simpan.setText("Simpan");
        simpan.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        simpan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        simpan.setEnabled(false);
        simpan.setIconTextGap(1);
        simpan.setMargin(new java.awt.Insets(2, 0, 2, 0));
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });
        getContentPane().add(simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, 87, 37));

        edit.setText("Ubah");
        edit.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        edit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        edit.setEnabled(false);
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        getContentPane().add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 330, 87, 37));

        tambah.setText("Tambah");
        tambah.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tambah.setBorderPainted(false);
        tambah.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tambah.setIconTextGap(2);
        tambah.setMargin(new java.awt.Insets(2, 0, 2, 0));
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });
        getContentPane().add(tambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 87, 37));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/logo.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 90, 190, 180));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Form Master 2.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        e_kdpemeriksaan.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        e_kddokter.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
        e_namadokter.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
        e_kdpasien.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
        e_namapasien.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        e_diagnosa.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        java.util.Date tgl_lhr = null;
        try {
            tgl_lhr = new SimpleDateFormat("yyyy-MM-dd").parse(tabel.getValueAt(jTable1.getSelectedRow(), 6).toString());
        } catch (ParseException ex) {
            System.out.println(ex);
        }
        e_tanggalperiksa.setDate(tgl_lhr);
        e_hasil.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());

        temp_kd_pemeriksaan = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();

        aktif(true);
        tambah.setEnabled(false);
        hapus.setEnabled(true);
        edit.setEnabled(true);
        simpan.setEnabled(false);
    }//GEN-LAST:event_jTable1MouseClicked

    private void batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batalActionPerformed
        e_kdpemeriksaan.setText("");
        e_kddokter.setSelectedItem("");
        e_namadokter.setText("");
        e_kdpasien.setText("");
        e_namapasien.setText("");
        e_diagnosa.setSelectedItem("");

        e_hasil.setText("");
        aktif(false);
        setTombol(true);
    }//GEN-LAST:event_batalActionPerformed

    private void cari_pasienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cari_pasienActionPerformed
        String kodepasienq = e_kdpasien.getText();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            Statement statement = koneksi.createStatement();
            String sql = "SELECT * FROM pasien WHERE kd_pasien LIKE '" + kodepasienq + "'";
            ResultSet rs = statement.executeQuery(sql);

            if (rs.next()) {
                aktif(true);
                setTombol(false);
                e_namapasien.setText(rs.getString(2));
                JOptionPane.showMessageDialog(null, "Data ditemukan", "Insert Data", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Data tidak ditemukan ", "Insert Data", JOptionPane.INFORMATION_MESSAGE);
            }

            statement.close();
            koneksi.close();
        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Eror:" + e.getMessage(), "Gagal", JOptionPane.WARNING_MESSAGE);
            System.err.println("Exception: " + e.getMessage());
        }
    }//GEN-LAST:event_cari_pasienActionPerformed
 
    private void e_kddokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_kddokterActionPerformed
        e_namadokter.setText(null);
        String kodedokterq = (String) e_kddokter.getSelectedItem();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            Statement statement = (Statement) koneksi.createStatement();
            String sql = "SELECT * FROM dokter WHERE kd_dokter like '" + kodedokterq + "'";
            ResultSet rs = statement.executeQuery(sql);
            if (rs.next()) {
                e_namadokter.setText(rs.getString(2));
            }
            statement.close();
            koneksi.close();
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Eror:" + e, "Gagal", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_e_kddokterActionPerformed

    private void e_diagnosaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_diagnosaActionPerformed
        String diagnosa = (String) (e_diagnosa.getSelectedItem());
        if (diagnosa == "Berat") {
            e_hasil.setText("Rawat Inap");

        } else if (diagnosa == "Ringan") {
            e_hasil.setText("Rawat Jalan");

        }
    }//GEN-LAST:event_e_diagnosaActionPerformed

    private void keluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keluarActionPerformed
        F_Menu fb = new F_Menu();
        fb.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_keluarActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        if (e_kdpemeriksaan.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pilih Data Terlebih Dahulu !");
        } else {
            int reply = JOptionPane.showConfirmDialog(this, "Hapus Data Pemeriksaan ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (reply == JOptionPane.YES_OPTION) {
                try {
                    Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
                    Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
                    Statement statement = koneksi.createStatement();

                    statement.executeUpdate("DELETE FROM pemeriksaan WHERE kd_pemeriksaan='" + e_kdpemeriksaan.getText() + "'");
                    statement.executeUpdate("DELETE FROM rawat_inap WHERE kd_pasien='" + e_kdpasien.getText() + "'");
                    statement.executeUpdate("DELETE FROM rawat_jalan WHERE kd_pasien='" + e_kdpasien.getText() + "'");

                    JOptionPane.showMessageDialog(this, "Data Dihapus !");
                    tampilkan_data();
                    statement.close();
                    koneksi.close();
                } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                    JOptionPane.showMessageDialog(this, "Data Gagal Dihapus !");
                    System.err.println("Exception: " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_hapusActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
        String user_id = e_kdpemeriksaan.getText();
        String kodedokterq = (String) e_kddokter.getSelectedItem();
        String namadokterq = e_namadokter.getText();
        String kodepasienq = e_kdpasien.getText();
        String namapasienq = e_namapasien.getText();
        String kodeperawatq = (String) e_diagnosa.getSelectedItem();
        String namaperawatq = String.valueOf(kal.format(e_tanggalperiksa.getDate()));
        String tglmasukq = e_hasil.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            Statement statement = koneksi.createStatement();

            String sql = "INSERT INTO pemeriksaan VALUES ('" + user_id + "','" + kodedokterq + "','" + namadokterq + "','" + kodepasienq + "','" + namapasienq + "','" + kodeperawatq + "','" + namaperawatq + "','" + tglmasukq + "')";
            int executeUpdate = statement.executeUpdate(sql);

            statement.close();
            JOptionPane.showMessageDialog(null, "Data berhasil dimasukkan..", "Insert Data", JOptionPane.INFORMATION_MESSAGE);
            aktif(true);
            e_kdpemeriksaan.setText("");
            e_kddokter.setSelectedItem("");
            e_namadokter.setText("");
            e_kdpasien.setText("");
            e_namapasien.setText("");
            e_diagnosa.setSelectedItem("");
            e_hasil.setText("");
            koneksi.close();
        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Eror: " + e.getMessage(), "Gagal", JOptionPane.WARNING_MESSAGE);
            System.err.println("Exception: " + e.getMessage());
        } finally {
            tampilkan_data();
        }
    }//GEN-LAST:event_simpanActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        String user_id = e_kdpemeriksaan.getText();
        String kodedokterq = (String) e_kddokter.getSelectedItem();
        String namadokterq = e_namadokter.getText();
        String kodepasienq = e_kdpasien.getText();
        String namapasienq = e_namapasien.getText();
        String kodeperawatq = (String) e_diagnosa.getSelectedItem();
        String namaperawatq = String.valueOf(kal.format(e_tanggalperiksa.getDate()));
        String tglmasukq = e_hasil.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            Statement statement = koneksi.createStatement();

            String sql = "UPDATE pemeriksaan SET kd_dokter='" + kodedokterq + "', nama_dokter='" + namadokterq + "', kd_pasien='" + kodepasienq + "', nama_pasien='" + namapasienq + "', diagnosa='" + kodeperawatq + "', tgl_pemeriksaan='" + namaperawatq + "', hasil='" + tglmasukq + "' WHERE kd_pemeriksaan LIKE '" + user_id + "'";
            statement.executeUpdate(sql);

            JOptionPane.showMessageDialog(null, "Data berhasil diedit..", "Edit Data", JOptionPane.INFORMATION_MESSAGE);
            statement.close();
            koneksi.close();
        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Eror: " + e.getMessage(), "Gagal", JOptionPane.WARNING_MESSAGE);
            System.err.println("Exception: " + e.getMessage());
        } finally {
            tampilkan_data();
        }
    }//GEN-LAST:event_editActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        aktif(true);
        setTombol(false);
        penomoran_otomatis();
    }//GEN-LAST:event_tambahActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        tampilkan_data();
        if (fungsi_simpan == true && fungsi_ubah == false) {
            empty_field();
        } else if (fungsi_ubah == true && fungsi_simpan == false) {

        } else {
            empty_field();
        }

        tambah.setEnabled(true);
        edit.setEnabled(false);
        hapus.setEnabled(false);
        simpan.setEnabled(false);
        fungsi_simpan = false;
        fungsi_ubah = false;
    }//GEN-LAST:event_refreshActionPerformed

    private void cari_dokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cari_dokterActionPerformed
        fungsi_pencarian();
        pencarian.requestFocus();
    }//GEN-LAST:event_cari_dokterActionPerformed

    private void pencarianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pencarianActionPerformed

    }//GEN-LAST:event_pencarianActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        for (double i = 0.0; i <= 1.0; i = i + 0.1) {
            String val = i + "";
            float f = Float.valueOf(val);
            this.setOpacity(f);
            try {
                Thread.sleep(30);
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Pemeriksaan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Pemeriksaan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Pemeriksaan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Pemeriksaan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Pemeriksaan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton batal;
    private javax.swing.JButton cari_dokter;
    private javax.swing.JButton cari_pasien;
    private javax.swing.JComboBox e_diagnosa;
    private javax.swing.JTextField e_hasil;
    private javax.swing.JComboBox e_kddokter;
    private javax.swing.JTextField e_kdpasien;
    private javax.swing.JTextField e_kdpemeriksaan;
    private javax.swing.JTextField e_namadokter;
    private javax.swing.JTextField e_namapasien;
    private com.toedter.calendar.JDateChooser e_tanggalperiksa;
    private javax.swing.JButton edit;
    private javax.swing.JButton hapus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton keluar;
    private javax.swing.JTextField pencarian;
    private javax.swing.JButton refresh;
    private javax.swing.JButton simpan;
    private javax.swing.JButton tambah;
    // End of variables declaration//GEN-END:variables

    private void tampilkan_data() {
        try {
            int data = jTable1.getRowCount();
            for (int i = 0; i < data; i++) {
                tabel.removeRow(0);
            }

            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            ResultSet re = koneksi.createStatement().executeQuery("SELECT * FROM pemeriksaan ORDER BY kd_pemeriksaan");

            while (re.next()) {
                String[] tabel_master = {re.getString(1), re.getString(2), re.getString(3), re.getString(4), re.getString(5), re.getString(6), re.getString(7), re.getString(8)};
                tabel.addRow(tabel_master);
            }

            koneksi.close();
        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            JOptionPane.showMessageDialog(this, "Terjadi Kesalahan Tampil Tabel: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void tampil_kodedokter() {
        e_kddokter.setSelectedItem("");
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            Statement statement = koneksi.createStatement();
            ResultSet re = statement.executeQuery("SELECT * FROM dokter ORDER BY kd_dokter ASC");

            while (re.next()) {
                e_kddokter.addItem(re.getString("kd_dokter"));
            }

            koneksi.close();
        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi Kesalahan Tampil Kode Dokter: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void penomoran_otomatis() {
        int no_kode_pemeriksaan = 0;
        String temp_kode_pemeriksaan = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");
            Statement statement = koneksi.createStatement();

            String sql = "select kd_pemeriksaan from pemeriksaan order by kd_pemeriksaan desc limit 1";
            ResultSet res = statement.executeQuery(sql);

            while (res.next()) {
                temp_kode_pemeriksaan = res.getString(1);
                String nomor_blkg = temp_kode_pemeriksaan.substring(2);
                no_kode_pemeriksaan = Integer.parseInt(nomor_blkg);
            }

            no_kode_pemeriksaan++;
            String nilai = String.valueOf(no_kode_pemeriksaan);
            if (nilai.length() == 1) {
                e_kdpemeriksaan.setText("KP00" + no_kode_pemeriksaan);
            } else if (nilai.length() == 2) {
                e_kdpemeriksaan.setText("KP0" + no_kode_pemeriksaan);
            } else if (nilai.length() == 3) {
                e_kdpemeriksaan.setText("KP" + no_kode_pemeriksaan);
            }

            koneksi.close();
        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi Error Penomoran: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void fungsi_pencarian() {
        try {
            int data = jTable1.getRowCount();
            for (int i = 0; i < data; i++) {
                tabel.removeRow(0);
            }

            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            Connection koneksi = DriverManager.getConnection("jdbc:mysql://localhost/db_rsprabu", "root", "");

            String sql = "SELECT * FROM pemeriksaan WHERE kd_pemeriksaan LIKE ? OR kd_pasien LIKE ? OR nama_pasien LIKE ? OR kd_ruangan LIKE ? OR nama_ruangan LIKE ? ORDER BY kd_inap";
            PreparedStatement statement = koneksi.prepareStatement(sql);
            String pencarianText = "%" + pencarian.getText() + "%";
            statement.setString(1, pencarianText);
            statement.setString(2, pencarianText);
            statement.setString(3, pencarianText);
            statement.setString(4, pencarianText);
            statement.setString(5, pencarianText);

            ResultSet re = statement.executeQuery();

            while (re.next()) {
                String[] tabel_master = {re.getString(1), re.getString(2), re.getString(3), re.getString(4), re.getString(5), re.getString(6), re.getString(7), re.getString(8)};
                tabel.addRow(tabel_master);
            }

            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Data Tidak Ditemukan !");
            }

            statement.close();
            koneksi.close();

        } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            JOptionPane.showMessageDialog(this, "Terjadi Kesalahan Fungsi Pencarian !\n" + ex.getMessage());
            System.err.println("Exception: " + ex.getMessage());
        }
    }


    private void aktif(boolean x) {
        e_kddokter.setEditable(x);
        e_namapasien.setEditable(x);
        e_kdpemeriksaan.requestFocus();
        e_tanggalperiksa.setEnabled(true);
    }

    private void setTombol(boolean t) {
        tambah.setEnabled(t);
        simpan.setEnabled(!t);
        hapus.setEnabled(!t);
        edit.setEnabled(!t);
        batal.setEnabled(!t);
    }

    private void aturKolom() {
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        column = jTable1.getColumnModel().getColumn(0);
        column.setPreferredWidth(125);
        column = jTable1.getColumnModel().getColumn(1);
        column.setPreferredWidth(265);
        column = jTable1.getColumnModel().getColumn(2);
        column.setPreferredWidth(125);
        column = jTable1.getColumnModel().getColumn(3);
        column.setPreferredWidth(125);
        column = jTable1.getColumnModel().getColumn(4);
        column.setPreferredWidth(125);
        column = jTable1.getColumnModel().getColumn(5);
        column.setPreferredWidth(125);
        column = jTable1.getColumnModel().getColumn(6);
        column.setPreferredWidth(125);
        column = jTable1.getColumnModel().getColumn(7);
        column.setPreferredWidth(125);
    }
    
    private void empty_field() {
        e_kdpemeriksaan.setText(null);

        e_namadokter.setText(null);
        e_kdpasien.setText(null);
        e_namapasien.setText(null);
        e_diagnosa.setSelectedItem("-");
        e_tanggalperiksa.setDate(null);
        e_hasil.setText(null);
    }

    private void enable_field() {
        e_kdpemeriksaan.setEditable(true);
        e_kddokter.setEditable(true);
        e_kdpasien.setEditable(true);
    }

    private void disable_field() {
        e_kdpemeriksaan.setEditable(false);
        e_kddokter.setEditable(false);
        e_kdpasien.setEditable(false);
    }    
}

